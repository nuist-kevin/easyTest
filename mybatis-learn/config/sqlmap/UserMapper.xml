<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间,作用就是对sql进行分类化的管理,理解为sql隔离 -->
<mapper namespace="com.mybatis.dao.UserDao">

	<!-- 注意:使用mapper代理开发时，namespace有特殊作用,namespace等于mapper接口地址  -->
	<!-- <mapper namespace="com.mybatis.dao.UserDao"> -->
	
	
	<!-- 查询订单，关联查询用户信息 -->
	<select id="getUserById" resultType="com.mybatis.entity.User">
		SELECT * FROM t_user t WHERE t.id = #{1};
	</select>

	<!-- 根据用户名称模糊查询用户信息,可能返回多条数据 
		resultType:指定的就是单条记录所映射的java类型; 
		${}:表示拼接sql字符串，将接收到的参数内容不加任何修饰拼接在sql中. 
		使用${}拼接sql，可能会引起sql注入 
		${value}:接收输入参数的内容，如果传入的是简单类型,${}中只能使用value -->
	<select id="getUserByName" resultType="com.mybatis.entity.User">
		SELECT * FROM t_user t WHERE t.username LIKE '%${value}%';
	</select>

	<insert id="insertUser" parameterType="com.mybatis.entity.User">
		<!-- oracle中用于自动生成主键 
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer"> 
			select 序列名.nextval() </selectKey> -->
		INSERT INTO t_user ( username, birthday, sex, address) VALUE
		(#{username}, #{birthday}, #{sex}, #{address} )
	</insert>

	<!-- 删除用户 根据ID删除用户,需要输入Id值 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from t_user where id=#{id}
	</delete>


	<!-- 更新用户 需要传入用户的Id和用户的更新信息 parameterType:指定User对象，包括Id和用户的更新信息,注意：Id是必须存在的 
		#{id}:从输入的User对象中获取Id的属性值 -->
	<update id="updateUser" parameterType="com.mybatis.entity.User">
		update t_user set
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		where id=#{id}
	</update>

</mapper>